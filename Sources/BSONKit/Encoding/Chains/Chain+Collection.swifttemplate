<% for chain in types.all where chain.name.hasPrefix("Chain") { %>
extension <%= chain.name %>: Collection
where S0 : Collection, <% for linkNumber in 1..<chain.variables.count - 1 { -%>S<%= linkNumber %> : Collection, <% } -%>S<%= chain.variables.count - 1 %> : Collection {
    public enum Index: Comparable {
<% for linkNumber in 0..<chain.variables.count { -%>
        case s<%= linkNumber %>(S<%= linkNumber %>.Index)
<% } -%>

        public static func < (lhs: Self, rhs: Self) -> Bool {
            switch (lhs, rhs) {
<% for linkNumber in 0..<chain.variables.count { -%>
<% for greaterLinkNumber in (linkNumber + 1)..<chain.variables.count { -%>
            case (.s<%= linkNumber %>(_), .s<%= greaterLinkNumber %>(_)):
                return true
<% } -%>
<% for lesserLinkNumber in 0..<linkNumber { -%>
            case (.s<%= linkNumber %>(_), .s<%= lesserLinkNumber %>(_)):
                return false
<% } -%>
            case (.s<%= linkNumber %>(let lhs), .s<%= linkNumber %>(let rhs)):
                return lhs < rhs
<% } -%>
            }
        }
    }

    public var count: Int {
<% for linkNumber in 0..<chain.variables.count - 1 { -%>
        let sum<%= linkNumber + 1 %> = <% if linkNumber == 0 { -%>s0.count<% } else { -%>sum<%= linkNumber %><% } -%> + s<%= linkNumber + 1 %>.count
<% } -%>
        return sum<%= chain.variables.count - 1 %>
    }

    public var startIndex: Index {
        .s0(s0.startIndex)
    }

    public var endIndex: Index {
        .s<%= chain.variables.count - 1 %>(s<%= chain.variables.count - 1 %>.endIndex)
    }

    public func index(after i: Index) -> Index {
        switch i {
<% for linkNumber in 0..<chain.variables.count { -%>
        case .s<%= linkNumber %>(let i):
<% if linkNumber < chain.variables.count - 1 { -%>
            let next = s<%= linkNumber %>.index(after: i)
            if next >= s<%= linkNumber %>.endIndex {
                return .s<%= linkNumber + 1 %>(s<%= linkNumber + 1 %>.startIndex)
            } else {
                return .s<%= linkNumber %>(next)
            }
<% } else { -%>
            return .s<%= linkNumber %>(s<%= linkNumber %>.index(after: i))
<% } -%>
<% } -%>
        }
    }

    public subscript(position: Index) -> S0.Element {
        switch position {
<% for linkNumber in 0..<chain.variables.count { -%>
        case .s<%= linkNumber %>(let position):
            return s<%= linkNumber %>[position]
<% } -%>
        }
    }
}
<% } %>