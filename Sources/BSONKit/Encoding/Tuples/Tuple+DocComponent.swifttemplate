<% for tuple in types.all where tuple.name.hasPrefix("Tuple") { %>
extension <%= tuple.name %>: DocComponent 
where <% for valueNumber in 0..<tuple.variables.count - 1 { -%>T<%= valueNumber %>: DocComponent, <% } -%>T<%= tuple.variables.count - 1 %>: DocComponent {
    public var bsonEncoded: [UInt8] {
        let sum0 = t0.bsonEncoded + t1.bsonEncoded
<% for valueNumber in 1..<tuple.variables.count { -%>
        let sum<%= valueNumber %> = sum<%= valueNumber - 1 %> + t<%= valueNumber %>.bsonEncoded
<% } -%>
        return sum<%= tuple.variables.count - 1 %>
    }

    public init(<% for valueNumber in 0..<tuple.variables.count - 1 { -%>_ t<%= valueNumber %>: T<%= valueNumber %>,<% } -%>_ t<%= tuple.variables.count - 1 %>: T<%= tuple.variables.count - 1 %>) {
<% for valueNumber in 0..<tuple.variables.count - 1 { -%>
        self.t<%= valueNumber %> = t<%= valueNumber %>
<% } -%>
        self.t<%= tuple.variables.count - 1 %> = t<%= tuple.variables.count - 1 %>
    }
}
<% } %>
