@resultBuilder
public struct DocBuilder {
    public static func buildBlock<T: DocComponent>(_ t: T) -> T {
        t
    }
<% for tupleSize in 2...10 { %>
    public static func buildBlock<<% for valueNumber in 0..<tupleSize - 1 { -%>T<%= valueNumber %>, <% } -%>T<%= tupleSize - 1 %>> (<% for valueNumber in 0..<tupleSize - 1 { -%>_ t<%= valueNumber %>: T<%= valueNumber %>, <% } -%>_ t<%= tupleSize - 1 %>: T<%= tupleSize - 1 %>) -> some DocComponent
    where <% for valueNumber in 0..<tupleSize - 1 { -%>T<%= valueNumber %> : DocComponent, <% } -%>T<%= tupleSize - 1 %> : DocComponent {
        Tuple<%= tupleSize %>(<% for valueNumber in 0..<tupleSize - 1 { -%>t<%= valueNumber %>, <% } -%>t<%= tupleSize - 1 %>)
    }
<% } %>
    public static func buildEither<T>(first component: T) -> T where T : DocComponent {
        component
    }

    public static func buildEither<T>(second component: T) -> T where T : DocComponent {
        component
    }

    public static func buildOptional<T>(_ component: T?) -> some DocComponent where T : DocComponent {
        OptionalComponent(component)
    }

    public static func buildLimitedAvailability<T>(_ component: T) -> T where T : DocComponent {
        component
    }
}